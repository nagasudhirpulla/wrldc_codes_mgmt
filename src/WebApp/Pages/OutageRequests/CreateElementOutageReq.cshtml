@page
@using Core.Enums
@model WebApp.Pages.OutageRequests.CreateElementOutageReqModel
@{
    ViewData["Title"] = "Create Element Outage Code Request";
}
<div class="row justify-content-center align-items-center">
    <div class="col col-md-8 col-lg-8 col-xl-6">
        <h2>@ViewData["Title"]</h2>
        <div class="form-group">
            <span>Select element type - </span>
            <select id="elTypesSelect" onchange="onElTypeChange()" class="form-control" >
                @foreach (var item in Model.ElementTypesOptions)
                {
                    <option value="@item.Value">@item.Text</option>
                }
            </select>
        </div>
        <br />
        <table id="displayTable" class="display table table-striped table-bordered table-hover table-responsive w-auto">
            <thead></thead>
        </table>
        <br/>
        <form method="post">
                <hr />
                <div asp-validation-summary="All" class="text-danger"></div>

                <input asp-for="NewReq.ElementId" type="hidden" />
                <input asp-for="NewReq.ElementName" type="hidden" />
                <input asp-for="NewReq.ElementTypeId" type="hidden" />
                <input asp-for="NewReq.ElementType" type="hidden" />

                <h4><span>Selected Element = </span><span id="selElemDisplaySpan">--Please select from above table--</span></h4>
                <div class="form-group">
                <label asp-for="NewReq.Description"></label>
                <input asp-for="NewReq.Description" class="form-control" />
                <span asp-validation-for="NewReq.Description" class="text-danger"></span>
            </div>
             <div class="form-group">
               <label asp-for="NewReq.DesiredExecutionStartTime"></label>
                <input asp-for="NewReq.DesiredExecutionStartTime" type="date" class="form-control" />
                <span asp-validation-for="NewReq.DesiredExecutionStartTime" class="text-danger"></span>
            </div>
            <div class="form-group">
               <label asp-for="NewReq.DesiredExecutionEndTime"></label>
                <input asp-for="NewReq.DesiredExecutionEndTime" type="date" class="form-control" />
                <span asp-validation-for="NewReq.DesiredExecutionEndTime" class="text-danger"></span>
            </div>
                <button type="submit" class="btn btn-success">Create Element Outage Code Request</button>
            </form>
    </div>
</div>
<br />
@section Scripts {
<link rel="stylesheet" type="text/css" href="~/js/node_modules/datatables.net-bs5/css/dataTables.bootstrap5.min.css">
<link rel="stylesheet" type="text/css" href="~/js/node_modules/datatables.net-buttons-bs5/css/buttons.bootstrap5.min.css">
<link rel="stylesheet" href="~/css/datatables/fixedHeader.dataTables.min.css" />
<script type="application/javascript" src="~/js/node_modules/datatables.net/js/jquery.dataTables.min.js"></script>
<script type="application/javascript" src="~/js/node_modules/datatables.net-bs5/js/dataTables.bootstrap5.min.js"></script>
<script type="application/javascript" src="~/js/node_modules/datatables.net-buttons/js/dataTables.buttons.min.js"></script>
<script type="application/javascript" src="~/js/node_modules/datatables.net-buttons-bs5/js/buttons.bootstrap5.min.js"></script>
<script type="application/javascript" src="~/js/node_modules/datatables.net-buttons/js/buttons.html5.min.js"></script>
<script type="application/javascript" src="~/js/node_modules/datatables.net-buttons/js/buttons.print.min.js"></script>
<script type="application/javascript" src="~/js/node_modules/jszip/dist/jszip.min.js"></script>
<script type="application/javascript" src="~/js/node_modules/pdfmake/build/pdfmake.min.js"></script>
<script type="application/javascript" src="~/js/node_modules/pdfmake/build/vfs_fonts.js"></script>
<script type="application/javascript" src="~/js/node_modules/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js"></script>

<link rel="stylesheet" type="text/css" href="~/css/datatables/select.bootstrap5.min.css">
<script type="application/javascript" src="~/js/node_modules/datatables.net-select/js/dataTables.select.min.js"></script>

@*<link rel="stylesheet" href="{{ url_for('static', filename='jquery_ui/jquery-ui.css">
            <script src="{{ url_for('static', filename='jquery_ui/jquery-ui.js"></script>*@


<script type="application/javascript">
        var selectedElemInfo_g = null;
        var elsFetchBaseUrl_g = "../api/scadadata/, elType=''";
        jQuery(document).ready(function($) {

        });

        function onElemRowSelect(rowObjs){
          if(rowObjs.length > 0){
            selectedElemInfo_g = rowObjs[0];
            displaySelectedElemInfo();
            populateSelectedElemInForm();
          }
        }

        function onElTypeChange(){
          // clear element info in form
          // populate element type info in form
          selectedElemInfo_g = null;
          populateSelectedElemInForm();
          displaySelectedElemInfo();
          var elTypeSelEl = document.getElementById("elTypesSelect");
          var elType = elTypeSelEl.options[elTypeSelEl.selectedIndex].text
          loadElements(elType, "displayTable", onElemRowSelect);
        }

        function populateSelectedElemInForm(){
          if(selectedElemInfo_g!=null){
            document.getElementsByName("NewReq.ElementId")[0].value = selectedElemInfo_g["id"];
            document.getElementsByName("NewReq.ElementName")[0].value = selectedElemInfo_g["name"];
            var elTypeSelEl = document.getElementById("elTypesSelect");
            document.getElementsByName("NewReq.ElementType")[0].value = elTypeSelEl.options[elTypeSelEl.selectedIndex].text;
            document.getElementsByName("NewReq.ElementTypeId")[0].value = elTypeSelEl.value;
          } else{
            document.getElementsByName("NewReq.ElementName")[0].value = "";
            document.getElementsByName("NewReq.ElementId")[0].value = "";
            document.getElementsByName("NewReq.ElementType")[0].value = "";
            document.getElementsByName("NewReq.ElementTypeId")[0].value = "";
          }
        }

        function displaySelectedElemInfo(){
          var displayElem = document.getElementById("selElemDisplaySpan");
          if(selectedElemInfo_g!=null){
            displayElem.innerText = selectedElemInfo_g["name"];
          } else{
            displayElem.innerText = "";
          }
        }

        function loadElements(elType, elTableId, onRowSelect) {
        const fetchUrl = "../../api/elements?elType=" + elType;
        if ($.fn.DataTable.isDataTable('#' + elTableId)) {
            $('#' + elTableId).DataTable().destroy();
            $('#' + elTableId + ' tbody').empty();
            $('#' + elTableId + ' thead').empty();
            $('#' + elTableId + ' tfoot').remove();
        }
        $.ajax({
            url: fetchUrl,
            type: 'get',
            contentType: "application/json",
            success: function (resp) {
                //TODO check if resp is non null and an array
                if (true) {
                    var elemsList = resp;
                    
                    console.log(elemsList);
                    
                    if (elemsList.length > 0) {
                        // populate elements table only if number of elements > 0
                        var colNames = Object.keys(elemsList[0]);
                        
                        
                        // move element name column to first
                        var elNameInd = colNames.indexOf("name");
                        if (elNameInd >= 0) {
                            colNames.splice(elNameInd, 1);
                            colNames.unshift("name")
                        }
                        // remove element id column
                        var elIdInd = colNames.indexOf("id");
                        if (elIdInd >= 0) {
                            colNames.splice(elIdInd, 1);
                        }

                        var dtColumns = [];
                        for (var i = 0; i < colNames.length; i++) {
                            dtColumns.push({ title: colNames[i], data: colNames[i] });
                        }
                        // create footer th elements
                        var footerHtml = "<tfoot><tr>";
                        for (var i = 0; i < dtColumns.length; i++) {
                            footerHtml += '<th>' + dtColumns[i].title + '</th>';
                        }
                        footerHtml += "</tr></tfoot>";
                        $("#" + elTableId).append(footerHtml);

                        // Setup - add a text input to each footer cell
                        $('#' + elTableId + ' tfoot th').each(function () {
                            //var title = $(this).text();
                            $(this).html('<input type="text" placeholder="Search" />');
                        });

                        var dataTable = $('#' + elTableId).DataTable({
                            data: elemsList,
                            columns: dtColumns,
                            lengthMenu: [
                                [10, 20, 50, 100, -1],
                                [10, 20, 50, 100, "All"]
                            ],
                            select: {
                                style: 'single'
                            },
                            order: [
                                [0, "desc"]
                            ],
                            dom: 'Bfrtip',
                            fixedHeader: true,
                            buttons: ['pageLength', 'copy', 'excel', 'pdf', 'csv', 'print']
                        });

                        // setup column based search
                        var r = $('#' + elTableId + ' tfoot tr');
                        r.find('th').each(function () {
                            $(this).css('padding', '3px');
                        });
                        $('#' + elTableId + ' thead').append(r);
                        $('#' + elTableId + " thead input").on('keyup change', function () {
                            dataTable
                                .column($(this).parent().index() + ':visible')
                                .search(this.value)
                                .draw();
                        });

                        // setup row selection listener
                        $('#' + elTableId).on('select.dt', function (e, dt, type, indexes) {
                            // get the array of rows
                            var rowsData = dt.rows(indexes).data();
                            // console.log(data);
                            onRowSelect(rowsData);
                        });
                        // $("#displayTable").DataTable().row({selected:true}).data()
                    }
                } else {
                    console.log('response not desired for fetching element types');
                    console.log(resp);
                }
            },
            error: function (jqXHR, exception) {
                console.log(jqXHR);
                console.log(exception);
            }
        });
    }
</script>
}